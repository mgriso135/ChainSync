{"ast":null,"code":"var _jsxFileName = \"/home/matteo/SupplyChainTracking/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [account, setAccount] = useState('');\n  const [products, setProducts] = useState([]);\n  const [contract, setContract] = useState(null);\n  useEffect(() => {\n    const connectWallet = async () => {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        setAccount(accounts[0]);\n      }\n    };\n    connectWallet();\n  }, []);\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const response = await fetch('/SupplyChainTracker.json');\n        const data = await response.json();\n        const abi = data.abi;\n        const contractAddress = data.networks.development.address; // Sostituisci con il nome corretto della rete\n\n        const web3 = new Web3(window.ethereum);\n        const contractInstance = new web3.eth.Contract(abi, contractAddress);\n        setContract(contractInstance);\n      } catch (error) {\n        console.error('Error fetching contract data:', error);\n      }\n    };\n    fetchContractData();\n  }, []);\n  const getProducts = async () => {\n    try {\n      const productCount = await contract.methods.productCount().call();\n      const products = [];\n      for (let i = 0; i < productCount; i++) {\n        const product = await contract.methods.products(i).call();\n        products.push(product);\n      }\n      setProducts(products);\n    } catch (error) {\n      console.error('Error fetching products:', error);\n    }\n  };\n  const addProduct = async productData => {\n    // Implement logic to add a product to the contract\n    // Example:\n    // await contract.methods.addProduct(productData).send({ from: account });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Supply Chain Tracker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Account: \", account]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getProducts,\n      children: \"Get Products\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"8q2xRSqkViyyz16NpprJ1cv37hY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Web3","jsxDEV","_jsxDEV","App","_s","account","setAccount","products","setProducts","contract","setContract","connectWallet","window","ethereum","accounts","request","method","fetchContractData","response","fetch","data","json","abi","contractAddress","networks","development","address","web3","contractInstance","eth","Contract","error","console","getProducts","productCount","methods","call","i","product","push","addProduct","productData","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/matteo/SupplyChainTracking/client/src/App.js"],"sourcesContent":["\nimport React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\n\nfunction App() {\n  const [account, setAccount] = useState('');\n  const [products, setProducts] = useState([]);\n  const [contract, setContract] = useState(null);\n\n  useEffect(() => {\n    const connectWallet = async () => {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        setAccount(accounts[0]);\n      }\n    };\n\n    connectWallet();\n  }, []);\n\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const response = await fetch('/SupplyChainTracker.json');\n        const data = await response.json();\n        const abi = data.abi;\n        const contractAddress = data.networks.development.address; // Sostituisci con il nome corretto della rete\n\n        const web3 = new Web3(window.ethereum);\n        const contractInstance = new web3.eth.Contract(abi, contractAddress);\n        setContract(contractInstance);\n      } catch (error) {\n        console.error('Error fetching contract data:', error);\n      }\n    };\n\n    fetchContractData();\n  }, []);\n\n  const getProducts = async () => {\n    try {\n        const productCount = await contract.methods.productCount().call();\n        const products = [];\n  \n        for (let i = 0; i < productCount; i++) {\n          const product = await contract.methods.products(i).call();\n          products.push(product);\n        }\n  \n        setProducts(products);\n      } catch (error) {\n        console.error('Error fetching products:', error);\n      }\n    };\n\n  const addProduct = async (productData) => {\n    // Implement logic to add a product to the contract\n    // Example:\n    // await contract.methods.addProduct(productData).send({ from: account });\n  };\n\n  return (\n    <div>\n      <h1>Supply Chain Tracker</h1>\n      <p>Account: {account}</p>\n      <button onClick={getProducts}>Get Products</button>\n      {/* Add form or other elements for adding products */}\n      {/* Display products */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/home/matteo/SupplyChainTracking/client/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [account, setAccount] = useState('');\n  const [products, setProducts] = useState([]);\n  const web3 = new Web3(window.ethereum);\n  var abi = \"\";\n  var contractAddress = \"\";\n  const [contract, setContract] = useState(null);\n  useEffect(() => {\n    // Funzione per connettere il wallet MetaMask\n    const connectWallet = async () => {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        setAccount(accounts[0]);\n      }\n    };\n    connectWallet();\n  }, []);\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const response = await fetch('/SupplyChainTracker.json'); // Adatta il percorso al tuo file\n        const data = await response.json();\n        abi = data.abi;\n        contractAddress = data.networks.development.address;\n        console.log(contractAddress);\n        const contractInstance = new web3.eth.Contract(abi, contractAddress);\n        setContract(contractInstance);\n        console.log(contractInstance);\n      } catch (error) {\n        console.error('Error fetching contract data:', error.toString());\n      }\n    };\n    fetchContractData();\n  }, []);\n\n  // Funzione per ottenere i prodotti dell'utente\n  const getProducts = async () => {\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    const account = accounts[0];\n    console.log(contract);\n    const products = await contract.methods.getProducts(account).call();\n    setProducts(products);\n  };\n\n  // Funzione per aggiungere un prodotto\n  const addProduct = async (name, manufacturer, serialNumber, initialOwner, initialLocation) => {\n    // ... codice per aggiungere un prodotto\n  };\n\n  // ... altre funzioni per interagire con il contratto\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Supply Chain Tracker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Account: \", account]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getProducts,\n      children: \"Get Products\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"8q2xRSqkViyyz16NpprJ1cv37hY=\");\n_c = App;\nexport default App;\n\n/*import React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport SupplyChainTracker from './contracts/SupplyChainTracker.json';\n\nconst App = () => {\n  const [web3, setWeb3] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [account, setAccount] = useState('');\n  const [productCount, setProductCount] = useState(0);\n\n  useEffect(() => {\n    const init = async () => {\n      // Connessione a Web3\n      if (window.ethereum) {\n        const web3Instance = new Web3(window.ethereum);\n        try {\n          // Richiedi l'accesso all'account\n          await window.ethereum.enable();\n          setWeb3(web3Instance);\n\n          // Ottieni l'account corrente\n          const accounts = await web3Instance.eth.getAccounts();\n          setAccount(accounts[0]);\n\n          // Ottieni l'istanza del contratto\n          const networkId = await web3Instance.eth.net.getId();\n          const deployedNetwork = SupplyChainTracker.networks[networkId];\n          const instance = new web3Instance.eth.Contract(\n            SupplyChainTracker.abi,\n            deployedNetwork && deployedNetwork.address,\n          );\n          setContract(instance);\n\n          // Ottieni il conteggio dei prodotti\n          const count = await instance.methods.productCount().call();\n          setProductCount(count);\n        } catch (error) {\n          console.error(\"Errore durante l'inizializzazione di Web3\", error);\n        }\n      }\n    };\n    init();\n  }, []);\n\n  const incrementProductCount = async () => {\n    if (contract && account) {\n      try {\n        await contract.methods.incrementProductCount().send({ from: account });\n        const newCount = await contract.methods.productCount().call();\n        setProductCount(newCount);\n      } catch (error) {\n        console.error(\"Errore durante l'incremento del conteggio\", error);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <h1>Supply Chain Tracker</h1>\n      <p>Account connesso: {account}</p>\n      <p>Conteggio prodotti: {productCount}</p>\n      <button onClick={incrementProductCount}>Incrementa conteggio</button>\n    </div>\n  );\n};\n\nexport default App;*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Web3","jsxDEV","_jsxDEV","App","_s","account","setAccount","products","setProducts","web3","window","ethereum","abi","contractAddress","contract","setContract","connectWallet","accounts","request","method","fetchContractData","response","fetch","data","json","networks","development","address","console","log","contractInstance","eth","Contract","error","toString","getProducts","methods","call","addProduct","name","manufacturer","serialNumber","initialOwner","initialLocation","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/matteo/SupplyChainTracking/client/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\n\nfunction App() {\n  const [account, setAccount] = useState('');\n  const [products, setProducts] = useState([]);\n  const web3 = new Web3(window.ethereum);\n  var abi = \"\";\n  var contractAddress = \"\";  \n  const [contract, setContract] = useState(null);\n\n\n useEffect(() => {\n    // Funzione per connettere il wallet MetaMask\n    const connectWallet = async () => {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        setAccount(accounts[0]);\n      }\n    };\n\n    connectWallet();\n  }, []);\n\n\n  useEffect(() => {\n    const fetchContractData = async () => {\n      try {\n        const response = await fetch('/SupplyChainTracker.json'); // Adatta il percorso al tuo file\n        const data = await response.json();\n        abi = data.abi;\n        contractAddress = data.networks.development.address;\n        console.log(contractAddress);\n        const contractInstance = new web3.eth.Contract(abi, contractAddress);\n        setContract(contractInstance); Â \n        console.log(contractInstance);\n      } catch (error) {\n        console.error('Error fetching contract data:', error.toString());\n      }\n    };\n\n    fetchContractData();\n  }, []);\n\n  // Funzione per ottenere i prodotti dell'utente\n  const getProducts = async () => {\n  const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n  const account = accounts[0];\nconsole.log(contract);\n  const products = await contract.methods.getProducts(account).call();\n  setProducts(products);\n};\n\n\n  // Funzione per aggiungere un prodotto\n  const addProduct = async (name, manufacturer, serialNumber, initialOwner, initialLocation) => {\n    // ... codice per aggiungere un prodotto\n  };\n\n  // ... altre funzioni per interagire con il contratto\n\n  return (\n    <div>\n      <h1>Supply Chain Tracker</h1>\n      <p>Account: {account}</p>\n      <button onClick={getProducts}>Get Products</button>\n      {/* Visualizzazione dei prodotti */}\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n/*import React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport SupplyChainTracker from './contracts/SupplyChainTracker.json';\n\nconst App = () => {\n  const [web3, setWeb3] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [account, setAccount] = useState('');\n  const [productCount, setProductCount] = useState(0);\n\n  useEffect(() => {\n    const init = async () => {\n      // Connessione a Web3\n      if (window.ethereum) {\n        const web3Instance = new Web3(window.ethereum);\n        try {\n          // Richiedi l'accesso all'account\n          await window.ethereum.enable();\n          setWeb3(web3Instance);\n\n          // Ottieni l'account corrente\n          const accounts = await web3Instance.eth.getAccounts();\n          setAccount(accounts[0]);\n\n          // Ottieni l'istanza del contratto\n          const networkId = await web3Instance.eth.net.getId();\n          const deployedNetwork = SupplyChainTracker.networks[networkId];\n          const instance = new web3Instance.eth.Contract(\n            SupplyChainTracker.abi,\n            deployedNetwork && deployedNetwork.address,\n          );\n          setContract(instance);\n\n          // Ottieni il conteggio dei prodotti\n          const count = await instance.methods.productCount().call();\n          setProductCount(count);\n        } catch (error) {\n          console.error(\"Errore durante l'inizializzazione di Web3\", error);\n        }\n      }\n    };\n    init();\n  }, []);\n\n  const incrementProductCount = async () => {\n    if (contract && account) {\n      try {\n        await contract.methods.incrementProductCount().send({ from: account });\n        const newCount = await contract.methods.productCount().call();\n        setProductCount(newCount);\n      } catch (error) {\n        console.error(\"Errore durante l'incremento del conteggio\", error);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <h1>Supply Chain Tracker</h1>\n      <p>Account connesso: {account}</p>\n      <p>Conteggio prodotti: {productCount}</p>\n      <button onClick={incrementProductCount}>Incrementa conteggio</button>\n    </div>\n  );\n};\n\nexport default App;*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
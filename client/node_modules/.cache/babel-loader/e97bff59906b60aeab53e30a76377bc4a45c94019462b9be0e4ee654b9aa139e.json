{"ast":null,"code":"var _jsxFileName = \"/home/matteo/SupplyChainTracking/client/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [account, setAccount] = useState('');\n  const [products, setProducts] = useState([]);\n  useEffect(() => {\n    // Funzione per connettere il wallet MetaMask\n    const connectWallet = async () => {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        setAccount(accounts[0]);\n      }\n    };\n    connectWallet();\n  }, []);\n\n  // Funzione per ottenere i prodotti dell'utente\n  const getProducts = async () => {\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    const account = accounts[0];\n    const products = await contract.methods.getProducts(account).call();\n    setProducts(products);\n  };\n\n  // Funzione per aggiungere un prodotto\n  const addProduct = async (name, manufacturer, serialNumber, initialOwner, initialLocation) => {\n    /*   const [productName, setProductName] = useState('');\n     const [manufacturer, setManufacturer] = useState('');\n     const [serialNumber, setSerialNumber] = useState('');\n     const [initialOwner, setInitialOwner] = useState('');\n     const [initialLocation, setInitialLocation] = useState('');*/\n\n    const handleProductSubmit = async event => {\n      event.preventDefault();\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const account = accounts[0];\n\n        // Assumiamo che 'contract' sia l'istanza del tuo contratto\n        await contract.methods.addProduct(productName, manufacturer, serialNumber, initialOwner, initialLocation).send({\n          from: account\n        });\n\n        // Aggiorna lo stato o mostra un messaggio di successo\n        console.log('Prodotto aggiunto con successo');\n      } catch (error) {\n        console.error('Errore durante l\\'aggiunta del prodotto:', error);\n      }\n    };\n  };\n\n  // ... altre funzioni per interagire con il contratto\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Supply Chain Tracker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Account: \", account]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getProducts,\n      children: \"Get Products\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Aggiungi un nuovo prodotto\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleProductSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Nome:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: productName,\n          onChange: e => setProductName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Aggiungi\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"YG5Ni7MaM29P3+VutsGicWz2YqU=\");\n_c = App;\nexport default App;\n\n/*import React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport SupplyChainTracker from './contracts/SupplyChainTracker.json';\n\nconst App = () => {\n  const [web3, setWeb3] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [account, setAccount] = useState('');\n  const [productCount, setProductCount] = useState(0);\n\n  useEffect(() => {\n    const init = async () => {\n      // Connessione a Web3\n      if (window.ethereum) {\n        const web3Instance = new Web3(window.ethereum);\n        try {\n          // Richiedi l'accesso all'account\n          await window.ethereum.enable();\n          setWeb3(web3Instance);\n\n          // Ottieni l'account corrente\n          const accounts = await web3Instance.eth.getAccounts();\n          setAccount(accounts[0]);\n\n          // Ottieni l'istanza del contratto\n          const networkId = await web3Instance.eth.net.getId();\n          const deployedNetwork = SupplyChainTracker.networks[networkId];\n          const instance = new web3Instance.eth.Contract(\n            SupplyChainTracker.abi,\n            deployedNetwork && deployedNetwork.address,\n          );\n          setContract(instance);\n\n          // Ottieni il conteggio dei prodotti\n          const count = await instance.methods.productCount().call();\n          setProductCount(count);\n        } catch (error) {\n          console.error(\"Errore durante l'inizializzazione di Web3\", error);\n        }\n      }\n    };\n    init();\n  }, []);\n\n  const incrementProductCount = async () => {\n    if (contract && account) {\n      try {\n        await contract.methods.incrementProductCount().send({ from: account });\n        const newCount = await contract.methods.productCount().call();\n        setProductCount(newCount);\n      } catch (error) {\n        console.error(\"Errore durante l'incremento del conteggio\", error);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <h1>Supply Chain Tracker</h1>\n      <p>Account connesso: {account}</p>\n      <p>Conteggio prodotti: {productCount}</p>\n      <button onClick={incrementProductCount}>Incrementa conteggio</button>\n    </div>\n  );\n};\n\nexport default App;*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Web3","jsxDEV","_jsxDEV","App","_s","account","setAccount","products","setProducts","connectWallet","window","ethereum","accounts","request","method","getProducts","contract","methods","call","addProduct","name","manufacturer","serialNumber","initialOwner","initialLocation","handleProductSubmit","event","preventDefault","productName","send","from","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSubmit","type","value","onChange","e","setProductName","target","_c","$RefreshReg$"],"sources":["/home/matteo/SupplyChainTracking/client/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\n\nfunction App() {\n  const [account, setAccount] = useState('');\n  const [products, setProducts] = useState([]);\n\n  useEffect(() => {\n    // Funzione per connettere il wallet MetaMask\n    const connectWallet = async () => {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        setAccount(accounts[0]);\n      }\n    };\n\n    connectWallet();\n  }, []);\n\n  // Funzione per ottenere i prodotti dell'utente\n  const getProducts = async () => {\n    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n    const account = accounts[0];\n  \n    const products = await contract.methods.getProducts(account).call();\n    setProducts(products);\n  };\n  \n\n  // Funzione per aggiungere un prodotto\n  const addProduct = async (name, manufacturer, serialNumber, initialOwner, initialLocation) => {\n /*   const [productName, setProductName] = useState('');\n  const [manufacturer, setManufacturer] = useState('');\n  const [serialNumber, setSerialNumber] = useState('');\n  const [initialOwner, setInitialOwner] = useState('');\n  const [initialLocation, setInitialLocation] = useState('');*/\n\n  const handleProductSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n      const account = accounts[0];\n\n      // Assumiamo che 'contract' sia l'istanza del tuo contratto\n      await contract.methods.addProduct(\n        productName,\n        manufacturer,\n        serialNumber,\n        initialOwner,\n        initialLocation\n      ).send({ from: account });\n\n      // Aggiorna lo stato o mostra un messaggio di successo\n      console.log('Prodotto aggiunto con successo');\n    } catch (error) {\n      console.error('Errore durante l\\'aggiunta del prodotto:', error);\n    }\n  };\n};\n\n  // ... altre funzioni per interagire con il contratto\n\n  return (\n    <div>\n      <h1>Supply Chain Tracker</h1>\n      <p>Account: {account}</p>\n      <button onClick={getProducts}>Get Products</button>\n      {/* Visualizzazione dei prodotti */}\n\n\n      <h2>Aggiungi un nuovo prodotto</h2>\n      <form onSubmit={handleProductSubmit}>\n        <label>\n          Nome:\n          <input type=\"text\" value={productName} onChange={(e) => setProductName(e.target.value)} />\n        </label>\n        {/* Altri input per gli altri campi */}\n        <button type=\"submit\">Aggiungi</button>\n      </form>\n\n\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n/*import React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport SupplyChainTracker from './contracts/SupplyChainTracker.json';\n\nconst App = () => {\n  const [web3, setWeb3] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [account, setAccount] = useState('');\n  const [productCount, setProductCount] = useState(0);\n\n  useEffect(() => {\n    const init = async () => {\n      // Connessione a Web3\n      if (window.ethereum) {\n        const web3Instance = new Web3(window.ethereum);\n        try {\n          // Richiedi l'accesso all'account\n          await window.ethereum.enable();\n          setWeb3(web3Instance);\n\n          // Ottieni l'account corrente\n          const accounts = await web3Instance.eth.getAccounts();\n          setAccount(accounts[0]);\n\n          // Ottieni l'istanza del contratto\n          const networkId = await web3Instance.eth.net.getId();\n          const deployedNetwork = SupplyChainTracker.networks[networkId];\n          const instance = new web3Instance.eth.Contract(\n            SupplyChainTracker.abi,\n            deployedNetwork && deployedNetwork.address,\n          );\n          setContract(instance);\n\n          // Ottieni il conteggio dei prodotti\n          const count = await instance.methods.productCount().call();\n          setProductCount(count);\n        } catch (error) {\n          console.error(\"Errore durante l'inizializzazione di Web3\", error);\n        }\n      }\n    };\n    init();\n  }, []);\n\n  const incrementProductCount = async () => {\n    if (contract && account) {\n      try {\n        await contract.methods.incrementProductCount().send({ from: account });\n        const newCount = await contract.methods.productCount().call();\n        setProductCount(newCount);\n      } catch (error) {\n        console.error(\"Errore durante l'incremento del conteggio\", error);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <h1>Supply Chain Tracker</h1>\n      <p>Account connesso: {account}</p>\n      <p>Conteggio prodotti: {productCount}</p>\n      <button onClick={incrementProductCount}>Incrementa conteggio</button>\n    </div>\n  );\n};\n\nexport default App;*/"],"mappings":"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A;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGJ,CAAC;AAEV;AAAClC,EAAA,CAjFQD,GAAG;AAAA4C,EAAA,GAAH5C,GAAG;AAmFZ,eAAeA,GAAG;;AAKlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlEA,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}